ptc9
[2.587176602924634,9.333333333333334,1.70261066969353],
[7.469342251950947,1.324503311258278,1.70261066969353],
[7.469342251950947,4.942528735632185,2.1857923497267757],
[11.473565804274465,9.333333333333334,2.1857923497267757],[11.473565804274465,1.324503311258278,0.44493882091212456],
[7.469342251950947,9.333333333333334,1.70261066969353],
[2.587176602924634,4.942528735632185,0.44493882091212456]
=>(1.167*10^5*%i+2.772*10^5)^(1/3)+(4.489*10^3)/(1.167*10^5*%i+2.772*10^5)^(1/3)+69.18

ptc8 100
[68.33976833976834,82.07720588235294,51.12149532710281],
[81.17760617760618,69.85294117647058,51.12149532710281],
[81.17760617760618,51.93014705882353,69.34579439252337],
[49.51737451737452,82.07720588235294,69.34579439252337],
[49.51737451737452,69.85294117647058,81.77570093457945],
[81.17760617760618,82.07720588235294,51.12149532710281],
[68.33976833976834,51.93014705882353,81.77570093457945]
=>(143.1*%i+87.57)^(1/3)+30.42/(143.1*%i+87.57)^(1/3)+2.032

ptc5 100
[68.43629343629344,69.94485294117646,5.133928571428571],
[68.43629343629344,3.4594594594594597,69.4392523364486],
[1.1160714285714284,69.94485294117646,69.4392523364486]
=>(2.007*10^5*%i-1.005*10^5)^(1/3)+(3.693*10^3)/(2.007*10^5*%i-1.005*10^5)^(1/3)+47.11

nub ptc6 100
[68.33976833976834,82.07720588235294,1.70261066969353,0,0,0,0],
[81.17760617760618,69.85294117647058,1.70261066969353,0,0,0,0],
[81.17760617760618,4.942528735632185,69.34579439252337,0,0,0,0],
[11.473565804274465,82.07720588235294,69.34579439252337,0,0,0,0],
[11.473565804274465,69.85294117647058,81.77570093457945,0,0,0,0],
[81.17760617760618,82.07720588235294,1.70261066969353,0,0,0,0],
[68.33976833976834,4.942528735632185,81.77570093457945,0,0,0,0]
=>(1.08*10^5*%i+5.417*10^3)^(1/3)+(2.27*10^3)/(1.08*10^5*%i+5.417*10^3)^(1/3)+69.18

nub (ptc7 100)
[68.43629343629344,69.94485294117646,38.8785046728972],
[68.43629343629344,39.889705882352935,69.4392523364486],
[36.87258687258687,69.94485294117646,69.4392523364486]


ptc9 "A".."A"
[3.683035714285714,4.212860310421286,3.0303030303030303],
[0,0,0],
[0,0,0]

ptc8 "A".."A"
[93.72586872586874,94.02573529411764,93.92523364485982],
[0,0,0]
[0,0,0]
progVar1 = "A"--"ccccc" --"AAABB" 
progVar2 = "A"--"AAABBAABAB"
progVar3 = "A"--"AABAB"
progVar4 = "AAA" --"A"--"AAA"
progVar5 = "AAABBBAA" --"A"--"AAABBBAA"
progVar6 = "BBBAA" --"A" --"BBBAA"

ptc8 "A".."A"

ptc7 "A".."A"
[93.72586872586874,94.02573529411764,3.0303030303030303],
[93.72586872586874,4.212860310421286,93.92523364485982],
[3.683035714285714,94.02573529411764,93.92523364485982]

daZip "A".."A"
 daZip 1
[1.0,1.0,25.447993447993454]
daZip 2
[1.0,22.318740325077396,1.0]
daZip 3
[30.99532710280374]
myMonad = do
      let metric r line = ausw r (group(sort(daZip line)));
      let dats r line = ausw r (group(getrep line))
      let sol r line = length (concat(metric r line))
      pin <- forM [1,2,3] (\pu -> do
          let fosol = length (group(getrep pu)) 
          checklin <- forM [1..(fosol)] (\chk -> do
                 let maak = metric chk pu
                 let flexL v y =take v (repeat y)
                 let lengthReplace = length (concat maak)
                 let retrun = if (map length (maak)) >= [2] && (ausw 1 (concat maak))/=[1.0] then flexL lengthReplace 0
                              else (concat maak) --[(head (metric 1 line)),head(ausw 2 (metric 2 line)),["0","0"]]
                 return(retrun))
          let binder = ( (concat checklin))
          --putStrLn checklin
          return(checklin))
          
      (pin)      

